---
# tasks file for ansible-gitea
- name: Install gnupg
  ansible.builtin.package:
    name: gnupg
    state: present

- name: Add Gitea git user
  ansible.builtin.user:
    name: "{{ gitea_user_name }}"
    home: "/home/{{ gitea_user_name }}"
    shell: /bin/bash
    password: "!"
    comment: "Git Version Control"

- name: Ensure required directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ gitea_user_name }}"
    group: "{{ gitea_user_group }}"
    mode: "0755"
  with_items:
    - "/home/{{ gitea_user_name }}/repositories"
    - "/home/{{ gitea_user_name }}/lfs"
    - "/var/lib/gitea/custom/conf"

- name: Ensure Gitea GPG signing key is installed
  ansible.builtin.apt_key:
    url: "{{ gitea_deb_gpg }}"
    keyring: /usr/share/keyrings/gitea-archive-keyring.gpg
    state: present

- name: Ensure Gitea repository is added
  ansible.builtin.apt_repository:
    repo: "{{ gitea_deb_repo }}"
    filename: gitea
    state: present

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600

- name: Install Gitea and Git
  ansible.builtin.package:
    name:
      - git
      - gitea
    state: present

- name: Check if Gitea config exists
  ansible.builtin.stat:
    path: /var/lib/gitea/custom/conf/app.ini
  register: gitea_config_exists

- name: Read existing Gitea config
  ansible.builtin.slurp:
    src: /var/lib/gitea/custom/conf/app.ini
  register: gitea_config
  when: gitea_config_exists.stat.exists

- name: Extract tokens from Gitea config
  ansible.builtin.set_fact:
    gitea_internal_token: "{{ (gitea_config.content | b64decode | regex_search('INTERNAL_TOKEN *= *(.*)', '\\1')) | default('', true) }}"
    gitea_lfs_jwt_secret: "{{ (gitea_config.content | b64decode | regex_search('LFS_JWT_SECRET *= *(.*)', '\\1')) | default('', true) }}"
    gitea_jwt_secret: "{{ (gitea_config.content | b64decode | regex_search('JWT_SECRET *= *(.*)', '\\1')) | default('', true) }}"
  when: gitea_config_exists.stat.exists

- name: Ensure Gitea configuration file exists
  ansible.builtin.template:
    src: gitea-app.ini.j2
    dest: /var/lib/gitea/custom/conf/app.ini
    mode: "0600"
    owner: "{{ gitea_user_name }}"
    group: "{{ gitea_user_group }}"
  notify: Restart gitea service

- name: Ensure Gitea service unit file is present
  ansible.builtin.template:
    src: gitea.service.j2
    dest: /etc/systemd/system/gitea.service
    mode: "0644"
    owner: root
    group: root
  notify: Restart gitea service

- name: Ensure Gitea socket unit file is present
  ansible.builtin.copy:
    src: gitea.main.socket
    dest: /etc/systemd/system/gitea.main.socket
    mode: "0644"
    owner: root
    group: root
  notify: Restart gitea socket

- name: Enable and start Gitea service
  ansible.builtin.systemd:
    name: gitea.main.socket
    state: started
    enabled: true

- name: Ensure gitea service is enabled and running
  ansible.builtin.systemd:
    name: gitea.service
    state: started
    enabled: true

- name: Create Gitea admin user
  ansible.builtin.shell: |
    gitea admin create-user \
    --name "{{ gitea_admin_user }}" \
    --password "{{ gitea_admin_password }}" \
    --email "{{ gitea_admin_email }}" \
    --admin \
    --config /var/lib/gitea/custom/conf/app.ini
  register: gitea_admin_user_created
  changed_when: '"user already exists" not in gitea_admin_user_created.stdout'
  become: true
  become_user: "{{ gitea_user_name }}"
  vars:
    ansible_ssh_pipelining: false
